name: Combined Workflow for CodeQL Analysis and Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build project
        run: mvn clean install -DskipTests

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar
          path: target/*.jar

  teste:
    name: teste
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Download artifacts from build job
        uses: actions/download-artifact@v4
        with:
          name: jar
          path: target

      - name: Run unit tests
        run: mvn test

  covarege:
    name: covarege
    needs: teste
    runs-on: ubuntu-latest
    permissions:
      contents: write  
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Build with Maven
      run: mvn -B package -Pcoverage

    - name: Generate JaCoCo badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        badges-directory: badges
        generate-branches-badge: true
        generate-summary: true

    - name: Log coverage percentages to workflow output
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branches = ${{ steps.jacoco.outputs.branches }}"

    - name: Upload JaCoCo coverage report as a workflow artifact
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-report
        path: target/site/jacoco/

    - name: Commit and push the coverage badges and summary file
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        cd badges
        if [[ `git status --porcelain *.svg *.json` ]]; then
          git config --global user.name 'squadThreeFiap'
          git config --global user.email 'squadThreeFiap@gmail.com'
          git add *.svg *.json
          git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
          # Set the remote to use HTTPS with the PAT for authentication
          git remote set-url origin https://squadThreeFiap:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/squadThreeFiap/second-tech-challenge.git
          git push
        fi

    - name: Comment on PR with coverage percentages
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        REPORT=$(<badges/coverage-summary.json)
        COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
        BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
        NEWLINE=$'\n'
        BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
        gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security:
    name: security
    needs: covarege
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@master

      - name: Set executable permissions for mvnw
        run: chmod +x ./mvnw

      - name: Run Maven command
        run: ./mvnw dependency:tree -DoutputType=dot --batch-mode --non-recursive --file="pom.xml"
        
      - name: Set up Node.js (Required for Snyk CLI)
        uses: actions/setup-node@master
        with:
          node-version: '14'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk to check for vulnerabilities (Debug Mode)
        run: snyk test --all-projects --debug
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  publish:
    name: publish
    needs: security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: jar
          path: target

      - name: Login Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push application docker image
        run: |
          docker build -t squadthreefiap/second-tech-challeng .
          docker push squadthreefiap/second-tech-challeng
  
  deploy:
    name: deploy
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}
          api-key: ${{ secrets.MY_RENDER_API_KEY }}
          wait-for-success: true

 